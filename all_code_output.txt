--- File: eslint.config.js ---

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

--- End of File: eslint.config.js ---


--- File: index.html ---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

--- End of File: index.html ---


--- File: package.json ---

{
  "name": "os-cheatsheet",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@tailwindcss/typography": "^0.5.16",
    "@tailwindcss/vite": "^4.1.7",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "tailwindcss": "^4.1.7",
    "vite": "^6.3.5"
  }
}

--- End of File: package.json ---


--- File: src/App.css ---

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

--- End of File: src/App.css ---


--- File: src/App.jsx ---

// src/App.jsx
import React from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
import Layout from "./components/Layout";
import ContentPage from "./pages/ContentPage"; // Наш новый компонент
import { osData } from "./data/osData";

function App() {
  // Функция для рекурсивного создания маршрутов
  const createRoutes = (data) => {
    let routes = [];
    data.forEach((item) => {
      // Маршрут для самого элемента (раздела или подраздела с контентом)
      if (item.content || (item.subsections && item.subsections.length > 0)) {
        // Добавляем маршрут, если есть контент или подразделы
        routes.push(
          <Route key={item.id} path={item.path} element={<ContentPage />} />
        );
      }

      // Рекурсивно создаем маршруты для подразделов
      if (item.subsections) {
        routes = routes.concat(createRoutes(item.subsections));
      }
    });
    return routes;
  };

  return (
    <Router>
      <Routes>
        <Route path="/" element={<Layout />}>
          {/* Главная страница */}
          <Route index element={<ContentPage />} />{" "}
          {/* Для отображения приветствия или чего-то на / */}
          {/* Генерируем маршруты из osData */}
          {createRoutes(osData)}
          {/* Можно добавить 404 страницу */}
          <Route path="*" element={<div>Страница не найдена</div>} />
        </Route>
      </Routes>
    </Router>
  );
}

export default App;

--- End of File: src/App.jsx ---


--- File: src/components/ContentPage.jsx ---



--- End of File: src/components/ContentPage.jsx ---


--- File: src/components/ContentRenderer.jsx ---

// src/components/ContentRenderer.jsx
import React from "react";

// Компонент для безопасного рендеринга HTML
const DangerousHTML = ({ html }) => {
  return <div dangerouslySetInnerHTML={{ __html: html }} />;
};

const ContentRenderer = ({ content }) => {
  if (!content) {
    return (
      <p className="text-neutral-500 dark:text-neutral-400">
        Контент для этого раздела еще не добавлен.
      </p>
    );
  }

  return (
    <div className="prose dark:prose-invert max-w-none">
      {" "}
      {/* Используем Tailwind Typography для стилизации */}
      {content.map((item, index) => {
        switch (item.type) {
          case "paragraph":
            return (
              <p key={index}>
                <DangerousHTML html={item.text} />
              </p>
            );
          case "heading":
            const Tag = `h${item.level || 2}`; // h2 по умолчанию
            return (
              <Tag key={index}>
                <DangerousHTML html={item.text} />
              </Tag>
            );
          case "list":
            const ListTag = item.ordered ? "ol" : "ul";
            return (
              <ListTag
                key={index}
                className={
                  item.ordered ? "list-decimal ml-5" : "list-disc ml-5"
                }
              >
                {item.items.map((li, i) => (
                  <li key={i}>
                    <DangerousHTML html={li} />
                  </li>
                ))}
              </ListTag>
            );
          case "code":
            return (
              <pre
                key={index}
                className="bg-neutral-800 dark:bg-black text-white p-4 rounded-md overflow-x-auto my-4"
              >
                <code className={`language-${item.language || "plaintext"}`}>
                  {item.code}
                </code>
              </pre>
            );
          case "table":
            return (
              <div key={index} className="overflow-x-auto my-4">
                <table className="min-w-full border-collapse border border-neutral-300 dark:border-neutral-600">
                  <thead>
                    <tr>
                      {item.headers.map((header, hIndex) => (
                        <th
                          key={hIndex}
                          className="border border-neutral-300 dark:border-neutral-600 px-4 py-2 bg-neutral-100 dark:bg-neutral-700 text-left font-semibold"
                        >
                          <DangerousHTML html={header} />
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {item.rows.map((row, rIndex) => (
                      <tr key={rIndex}>
                        {row.map((cell, cIndex) => (
                          <td
                            key={cIndex}
                            className="border border-neutral-300 dark:border-neutral-600 px-4 py-2"
                          >
                            <DangerousHTML html={cell} />
                          </td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            );
          case "blockquote":
            return (
              <blockquote
                key={index}
                className="border-l-4 border-neutral-400 dark:border-neutral-500 pl-4 italic my-4"
              >
                <DangerousHTML html={item.text} />
              </blockquote>
            );
          default:
            return (
              <p key={index} className="text-red-500">
                Неизвестный тип контента: {item.type}
              </p>
            );
        }
      })}
    </div>
  );
};

export default ContentRenderer;

--- End of File: src/components/ContentRenderer.jsx ---


--- File: src/components/Layout.jsx ---

// src/components/Layout.jsx
import React from "react";
import { Outlet } from "react-router-dom";
import Sidebar from "./Sidebar";

const Layout = () => {
  return (
    <div className="flex min-h-screen bg-neutral-100 dark:bg-neutral-800 text-neutral-800 dark:text-neutral-200">
      <Sidebar />
      {/* flex-1 обеспечит, что main займет оставшееся место.
          h-screen и overflow-y-auto для main позволят прокручивать только контентную часть,
          если сайдбар position: sticky.
      */}
      <main className="flex-1 h-screen overflow-y-auto">
        <div className="p-6 md:p-10 max-w-4xl mx-auto">
          {" "}
          {/* Ограничиваем ширину контента и центрируем */}
          <Outlet />
        </div>
      </main>
    </div>
  );
};

export default Layout;

--- End of File: src/components/Layout.jsx ---


--- File: src/components/Sidebar.jsx ---

// src/components/Sidebar.jsx
import React, { useState } from "react";
import { NavLink, useLocation } from "react-router-dom";
import { osData } from "../data/osData";

// Иконки для "стрелочек" (можно использовать SVG или символы)
const ChevronDown = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 20 20"
    fill="currentColor"
    className="w-4 h-4 inline-block ml-1 transform transition-transform duration-200"
  >
    <path
      fillRule="evenodd"
      d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z"
      clipRule="evenodd"
    />
  </svg>
);

const SidebarLink = ({ to, children, className = "", exact = false }) => {
  return (
    <NavLink
      to={to}
      end={exact} // end={true} для точного совпадения пути, если нужно
      className={({ isActive }) =>
        `${className} block py-2 px-3 rounded-md hover:bg-blue-100 dark:hover:bg-neutral-700 transition-colors ${
          isActive
            ? "bg-blue-100 dark:bg-neutral-700 font-semibold text-blue-700 dark:text-blue-100"
            : "text-neutral-700 dark:text-neutral-300"
        }`
      }
    >
      {children}
    </NavLink>
  );
};

const Sidebar = () => {
  const location = useLocation();
  // Состояние для отслеживания открытых/закрытых основных разделов
  const [openSections, setOpenSections] = useState(() => {
    // Изначально открываем раздел, если текущий путь находится внутри него
    const currentOpen = {};
    osData.forEach((section) => {
      if (location.pathname.startsWith(section.path)) {
        currentOpen[section.id] = true;
      }
    });
    return currentOpen;
  });

  const toggleSection = (sectionId) => {
    setOpenSections((prev) => ({ ...prev, [sectionId]: !prev[sectionId] }));
  };

  // Обновляем открытые секции при изменении URL
  useEffect(() => {
    const currentOpen = {};
    let sectionFound = false;
    osData.forEach((section) => {
      if (location.pathname.startsWith(section.path)) {
        currentOpen[section.id] = true;
        sectionFound = true;
      }
    });
    // Если мы на главной странице, не открываем никакие секции по умолчанию (кроме как если бы у / был свой id)
    if (location.pathname === "/") {
      setOpenSections({});
    } else if (sectionFound) {
      setOpenSections(currentOpen);
    }
    // Если нужно, чтобы при уходе из раздела он закрывался, можно добавить else: setOpenSections({});
  }, [location.pathname]);

  return (
    <aside className="w-72 bg-neutral-50 dark:bg-neutral-900 p-5 shadow-lg_ overflow-y-auto border-r border-neutral-200 dark:border-neutral-700 flex-shrink-0 h-screen sticky top-0">
      <NavLink to="/" className="block">
        <h1 className="text-2xl font-bold mb-6 text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-500 transition-colors">
          ОС Конспект
        </h1>
      </NavLink>
      <nav>
        <ul>
          {osData.map((section) => (
            <li key={section.id} className="mb-1">
              <button
                onClick={() => toggleSection(section.id)}
                className="w-full flex justify-between items-center py-2 px-3 rounded-md text-left text-neutral-800 dark:text-neutral-200 hover:bg-blue-100 dark:hover:bg-neutral-700 focus:outline-none transition-colors"
              >
                <span
                  className={`${
                    location.pathname.startsWith(section.path) &&
                    !openSections[section.id]
                      ? "font-semibold text-blue-700 dark:text-blue-200"
                      : location.pathname === section.path
                      ? "font-bold text-blue-700 dark:text-blue-100"
                      : ""
                  }`}
                >
                  {section.title}
                </span>
                {section.subsections && section.subsections.length > 0 && (
                  <span
                    className={`transform transition-transform duration-200 ${
                      openSections[section.id] ? "rotate-180" : ""
                    }`}
                  >
                    <ChevronDown />
                  </span>
                )}
              </button>

              {openSections[section.id] && section.subsections && (
                <ul className="pl-4 mt-1 border-l border-neutral-300 dark:border-neutral-600 ml-2">
                  {/* Ссылка на "обзор" главного раздела, если у него есть свой контент */}
                  {/* Это нужно, если path основного раздела ведет на страницу с его собственным контентом, а не только как заголовок для подразделов */}
                  {/*
                  <li>
                     <SidebarLink to={section.path} className="text-sm" exact={true}>
                       Обзор раздела
                     </SidebarLink>
                  </li>
                  */}
                  {section.subsections.map((subsection) => (
                    <li key={subsection.id} className="my-0.5">
                      <SidebarLink to={subsection.path} className="text-sm">
                        {subsection.title.replace(/^(\d+\.\d+\.\s*)/, "")}{" "}
                        {/* Убираем нумерацию для краткости */}
                      </SidebarLink>
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))}
        </ul>
      </nav>
    </aside>
  );
};

// Не забудь импортировать useEffect из 'react'
import { useEffect } from "react";

export default Sidebar;

--- End of File: src/components/Sidebar.jsx ---


--- File: src/components/ThemeSwitcher.jsx ---

// src/components/ThemeSwitcher.jsx
import React, { useState, useEffect } from "react";

const MoonIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className="w-6 h-6"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z"
    />
  </svg>
);

const SunIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className="w-6 h-6"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-6.364-.386 1.591-1.591M3 12h2.25m.386-6.364 1.591 1.591"
    />
  </svg>
);

const ThemeSwitcher = () => {
  const [theme, setTheme] = useState(localStorage.getItem("theme") || "light");

  useEffect(() => {
    if (theme === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
    localStorage.setItem("theme", theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme(theme === "light" ? "dark" : "light");
  };

  return (
    <button
      onClick={toggleTheme}
      className="p-2 rounded-md hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
      aria-label={`Switch to ${theme === "light" ? "dark" : "light"} mode`}
    >
      {theme === "light" ? <MoonIcon /> : <SunIcon />}
    </button>
  );
};

export default ThemeSwitcher;

--- End of File: src/components/ThemeSwitcher.jsx ---


--- File: src/data/osData.js ---

// src/data/osData.js

const createContentItem = (type, data) => ({ type, ...data });


--- End of File: src/data/osData.js ---


--- File: src/index.css ---

/* src/index.css */
@import "tailwindcss";
/* Если используешь highlight.js, импортируй его стили тут */
/* @import 'highlight.js/styles/atom-one-dark.css'; */

@theme {
  /* Определяем переменные для шрифтов */
  --font-primary: "Inter", ui-sans-serif, system-ui, sans-serif; /* Замени "Inter" на свой выбор */
  --font-mono: "Fira Code", ui-monospace, SFMono-Regular, Menlo, Monaco,
    Consolas, "Liberation Mono", "Courier New", monospace; /* Замени "Fira Code" */

  /* Можно определить кастомные цвета для акцентов */
  --color-accent: oklch(65% 0.22 255); /* Пример синего */
  --color-accent-hover: oklch(60% 0.25 255);
  --color-code-bg-light: oklch(95% 0.01 255); /* Светлый фон для кода */
  --color-code-text-light: oklch(30% 0.01 255);
  --color-code-bg-dark: oklch(20% 0.02 255); /* Темный фон для кода */
  --color-code-text-dark: oklch(85% 0.01 255);
}

@layer base {
  body {
    @apply font-[--font-primary] text-neutral-800 bg-neutral-50 dark:text-neutral-200 dark:bg-neutral-900 antialiased leading-relaxed;
    /* Добавил leading-relaxed для лучшего межстрочного интервала */
  }

  /* Стилизация заголовков (prose это уже делает, но можно переопределить или усилить) */
  h1 {
    @apply text-4xl font-extrabold my-6 tracking-tight text-neutral-900 dark:text-neutral-100;
  }
  h2 {
    @apply text-3xl font-bold my-5 border-b border-neutral-200 dark:border-neutral-700 pb-2 text-neutral-800 dark:text-neutral-200;
  }
  h3 {
    @apply text-2xl font-semibold my-4 text-neutral-700 dark:text-neutral-300;
  }
  h4 {
    @apply text-xl font-semibold my-3 text-neutral-700 dark:text-neutral-300;
  }

  p {
    @apply my-4;
  } /* Увеличил вертикальные отступы у параграфов */

  ul,
  ol {
    @apply my-4 ml-6 space-y-1;
  } /* Добавил space-y-1 для отступа между элементами списка */

  /* Улучшенные стили для инлайнового кода */
  code:not(pre > code) {
    /* Только инлайновый, не в блоке <pre> */
    @apply bg-[--color-code-bg-light] dark:bg-[--color-code-bg-dark] text-[--color-code-text-light] dark:text-[--color-code-text-dark] px-1.5 py-1 rounded-md text-[0.9em] font-[--font-mono];
  }

  /* Блоки кода - если не используется highlight.js или для дополнения */
  pre {
    @apply bg-[--color-code-bg-dark] text-[--color-code-text-dark] p-4 rounded-lg overflow-x-auto my-6 shadow-md font-[--font-mono] text-sm;
  }
  pre code {
    /* Код внутри pre */
    @apply bg-transparent p-0 text-inherit; /* Убираем стили инлайнового кода */
  }

  a {
    @apply text-[--color-accent] hover:text-[--color-accent-hover] dark:text-sky-400 dark:hover:text-sky-300 font-medium transition-colors;
    /* Убрал underline по умолчанию, можно добавить hover:underline */
  }
  a:hover {
    @apply underline;
  }

  blockquote {
    @apply border-l-4 border-[--color-accent] dark:border-sky-500 pl-4 italic my-6 text-neutral-600 dark:text-neutral-400 py-2 bg-neutral-100 dark:bg-neutral-800 rounded-r-md;
  }

  table {
    @apply w-full my-6 border-collapse text-sm;
  }
  th,
  td {
    @apply border border-neutral-300 dark:border-neutral-700 px-4 py-2 text-left;
  }
  th {
    @apply bg-neutral-100 dark:bg-neutral-800 font-semibold text-neutral-700 dark:text-neutral-200;
  }
  hr {
    @apply my-8 border-neutral-200 dark:border-neutral-700;
  }
}

--- End of File: src/index.css ---


--- File: src/main.jsx ---

// src/main.jsx или src/main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx"; // или App.tsx
import "./index.css"; // Вот эта строка

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

--- End of File: src/main.jsx ---


--- File: src/pages/ContentPage.jsx ---

// src/pages/ContentPage.jsx
import React from "react";
import { useParams, Link, useLocation } from "react-router-dom";
import { osData } from "../data/osData";
import ContentRenderer from "../components/ContentRenderer";

const ContentPage = () => {
  const params = useParams(); // Получаем параметры из URL (например, sectionId, subsectionId)
  const location = useLocation(); // Получаем текущий путь

  // Находим текущий раздел и подраздел на основе path
  let currentData = null;
  let pageTitle = "Конспект по ОС";
  let breadcrumbs = [{ title: "Главная", path: "/" }];

  const findData = (data, currentPath) => {
    for (const section of data) {
      if (section.path === currentPath) {
        return section;
      }
      if (section.subsections) {
        for (const subsection of section.subsections) {
          if (subsection.path === currentPath) {
            return subsection;
          }
          if (subsection.subsections) {
            // Для более глубокой вложенности (если будет)
            const deepSub = findData(subsection.subsections, currentPath);
            if (deepSub) return deepSub;
          }
        }
      }
    }
    return null;
  };

  const foundItem = findData(osData, location.pathname);

  if (foundItem) {
    currentData = foundItem.content;
    pageTitle = foundItem.title;

    // Построение хлебных крошек (упрощенный вариант)
    const pathParts = location.pathname.split("/").filter(Boolean);
    let currentPathForBreadcrumb = "";
    if (pathParts.length > 0) {
      const sectionData = osData.find((s) => s.id === pathParts[0]);
      if (sectionData) {
        breadcrumbs.push({ title: sectionData.title, path: sectionData.path });
        if (pathParts.length > 1 && sectionData.subsections) {
          const subsectionData = sectionData.subsections.find(
            (sub) =>
              sub.id === `${pathParts[0]}-${pathParts[1]}` ||
              sub.path.endsWith(pathParts[1])
          );
          if (subsectionData) {
            breadcrumbs.push({
              title: subsectionData.title,
              path: subsectionData.path,
            });
          }
        }
      }
    }
  } else if (location.pathname === "/") {
    pageTitle = "Добро пожаловать!";
    currentData = [
      { type: "paragraph", text: "Выберите раздел для изучения в меню слева." },
    ];
  }

  return (
    <div className="bg-white dark:bg-neutral-800 shadow-md rounded-lg p-6 md:p-8">
      <nav
        aria-label="breadcrumb"
        className="mb-6 text-sm text-neutral-500 dark:text-neutral-400"
      >
        <ol className="list-none p-0 inline-flex">
          {breadcrumbs.map((crumb, index) => (
            <li key={index} className="flex items-center">
              {index > 0 && <span className="mx-2">/</span>}
              {index === breadcrumbs.length - 1 ? (
                <span className="text-neutral-700 dark:text-neutral-300 font-semibold">
                  {crumb.title}
                </span>
              ) : (
                <Link to={crumb.path} className="hover:underline">
                  {crumb.title}
                </Link>
              )}
            </li>
          ))}
        </ol>
      </nav>

      <h1 className="text-3xl font-bold mb-6 border-b pb-3 border-neutral-200 dark:border-neutral-700 text-neutral-900 dark:text-neutral-100">
        {pageTitle}
      </h1>
      {currentData ? (
        <ContentRenderer content={currentData} />
      ) : (
        <p>Раздел не найден или находится в разработке.</p>
      )}
    </div>
  );
};

export default ContentPage;

--- End of File: src/pages/ContentPage.jsx ---


--- File: src/pages/HomePage.jsx ---



--- End of File: src/pages/HomePage.jsx ---


--- File: tailwind.config.js ---

/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

--- End of File: tailwind.config.js ---


--- File: vite.config.js ---

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite"; // Импортируем плагин

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    tailwindcss(), // Добавляем плагин Tailwind CSS
  ],
});

--- End of File: vite.config.js ---
